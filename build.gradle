plugins {
    id 'java'
}

group 'com.darksoldier1404'
version = '1.0.0.6'

compileJava.options.encoding = 'UTF-8'
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
configurations {
    jar.archiveName = 'DP-SimpleShop-_v1_18_1-'+version+'.jar'
}
build {
    sourceCompatibility = 17
    targetCompatibility = 17
}
jar{
    destinationDirectory.set(file("$rootDir/jars"))
}
task DS_BUILD {
    doFirst {
        def v = buildFile.getText().find(version)
        def (major, minor, patch, build) = v.tokenize('.')
        int newBuild = build.toInteger() + 1
        String newVersion = major + "." + minor + "." + patch + "." + newBuild
        String updatedVersion = buildFile.getText().replaceFirst("version = '" + v + "'", "version = '" + newVersion + "'")

        allprojects.forEach(p -> {
            p.buildFile.setText(p.buildFile.getText().replaceFirst("version = '" + v + "'", "version = '" + newVersion + "'"))
            println "Project Module : " + p.name
            p.sourceSets.main.resources.srcDirs().getFiles().forEach(o -> {
                if (o.getName().equals("plugin.yml")) {
                    List<String> lines = new ArrayList<String>()
                    String line
                    File f = o
                    println "File : " + f.getAbsolutePath()
                    FileReader fr = new FileReader(f)
                    BufferedReader br = new BufferedReader(fr)
                    while ((line = br.readLine()) != null) {
                        if(line.contains("version") && !line.contains("api")) {
                            line = "version: " + newVersion
                        }
                        lines.add(line + "\n")
                    }
                    fr.close()
                    br.close()
                    BufferedWriter out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(f), "UTF-8"));
                    lines.forEach(out::write)
                    out.close()
                }
            })
        })
        buildFile.setText(updatedVersion)
    }
}

repositories {
    mavenCentral()
    maven {
        url "http://dpnw.site:8081/repository/maven-public/"
        allowInsecureProtocol = true
    }
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    compileOnly 'org.bukkit.craftbukkit:craftbukkit:R0.1:1.18'
    compileOnly 'org.spigotmc:spigot-api:R0.1:1.18'
    compileOnly 'com.darksoldier1404.dppc:DPP-Core:1.18.1-SNAPSHOT'
}

test {
    useJUnitPlatform()
}